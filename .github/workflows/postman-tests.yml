name: Run Postman Collection with CSV Data

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-postman:
    runs-on: ubuntu-latest
    env:
      APP_PORT: 8091
      BASE_API_PATH: ""         # set to "/api" if your collection expects it
      SERVICE_NAME: laravel-api # change if your service name in docker-compose.yml is different

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node (for newman)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm install -g newman

      - name: Start containers üê≥
        run: |
          export DISABLE_LOGGING=true
          docker compose -f docker-compose.yml up -d --force-recreate
      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash
      - name: Create & Seed database üå±
        run: |
          docker compose exec -T laravel-api php artisan migrate:refresh --seed
      - name: GET Version
        run: curl -v -X GET 'http://localhost:8091/status'
      
      - name: Download Postman Collection
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_COLLECTION_ID: ${{ secrets.POSTMAN_COLLECTION_ID }}
        run: |
          if [ -z "${POSTMAN_API_KEY}" ] || [ -z "${POSTMAN_COLLECTION_ID}" ]; then
            echo "Missing POSTMAN_API_KEY or POSTMAN_COLLECTION_ID secrets"
            exit 1
          fi

          curl --fail --location \
            --request GET "https://api.getpostman.com/collections/${POSTMAN_COLLECTION_ID}" \
            --header "X-Api-Key: ${POSTMAN_API_KEY}" \
            --output collection.json

          # If the response is the wrapper { collection: {...} }, extract the inner object
          if jq -e '.collection' collection.json > /dev/null 2>&1; then
            jq '.collection' collection.json > collection_only.json
            mv collection_only.json collection.json
          fi

      - name: Run Tests with CSV from repo
        if: ${{ hashFiles('test-data/*.csv') != '' }}
        run: |
          BASE_URL="http://127.0.0.1:${APP_PORT}${BASE_API_PATH}"
          echo "Using baseUrl=${BASE_URL}"
          for csv_file in test-data/*.csv; do
            echo "Running tests with $csv_file"
            newman run collection.json \
              -d "$csv_file" \
              --env-var "baseUrl=${BASE_URL}" \
              --iteration-count 30 \
              --reporters cli,junit \
              --reporter-junit-export "newman-${csv_file##*/}.xml"
          done

      - name: Run Tests without CSV
        if: ${{ hashFiles('test-data/*.csv') == '' }}
        run: |
          BASE_URL="http://127.0.0.1:${APP_PORT}${BASE_API_PATH}"
          echo "Using baseUrl=${BASE_URL}"
          newman run collection.json \
            --env-var "baseUrl=${BASE_URL}" \
            --reporters cli,json \
            --reporter-json-export result.json

      - name: Display Results
        if: always()
        run: |
          if [ -f result.json ]; then
            echo "========================"
            echo "    TEST RESULTS        "
            echo "========================"
            assertions=$(jq '.run.stats.assertions.total' result.json)
            passed=$(jq '.run.stats.assertions.passed' result.json)
            failed=$(jq '.run.stats.assertions.failed' result.json)

            echo "Total: $assertions"
            echo "‚úÖ Passed: $passed"
            echo "‚ùå Failed: $failed"
            echo "========================"
          else
            echo "No result.json generated. Check newman outputs / JUnit files for details."
          fi

      - name: Cleanup
        if: always()
        run: |
          # Stop and remove containers and volumes from the root docker-compose.yml
          if [ -f "${GITHUB_WORKSPACE}/docker-compose.yml" ]; then
            docker compose -f "${GITHUB_WORKSPACE}/docker-compose.yml" down --volumes || true
          fi
